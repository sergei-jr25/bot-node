const { TelegramClient } = require('telegram')
const { StringSession } = require('telegram/sessions')
const readline = require('readline')
const { NewMessage } = require('telegram/events')
const { Api } = require('telegram/tl')

const fs = require('fs')
const dotenv = require('dotenv')

dotenv.config()

const apiId = Number(process.env.API_KENDY)
const apiHash = process.env.APPI_HASH_KENDY

const sessionFilePath = 'ssesinon-keyndy.txt'
const sessionString = fs.existsSync(sessionFilePath)
	? fs.readFileSync(sessionFilePath, 'utf8')
	: ''

let stringSession = new StringSession(sessionString)
const channels = ['channel_1r', 'channel_2r', 'Channel_1 Chat']

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout,
})

console.log('Loading interactive example...')
const client = new TelegramClient(stringSession, apiId, apiHash, {
	connectionRetries: 5,
})

async function startBot() {
	await client.start({
		phoneNumber: async () =>
			new Promise(resolve =>
				rl.question('Please enter your number: ', resolve)
			),
		password: async () =>
			new Promise(resolve =>
				rl.question('Please enter your password: ', resolve)
			),
		phoneCode: async () =>
			new Promise(resolve =>
				rl.question('Please enter the code you received: ', resolve)
			),
		onError: err => console.log(err),
	})

	console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
	console.log('–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ .env:')
	console.log(client.session.save())
	const messageText = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ üòä'
	const delayBetweenMessages = 3000 // ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
	// await checkAllComments('Channel_1 Chat', client)

	// –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
	client.addEventHandler(handleNewMessage, new NewMessage({}))

	// await sendBulkMessages(client, channels[0],messageText)

	// await parseUsers(channels[0])

	// await sendUsersMessage(delayBetweenMessages, messageText)
}
async function isAdmin(channelId, userId) {
	try {
		const participants = await client.invoke(
			new Api.channels.GetParticipants({
				channel: channelId,
				filter: new Api.ChannelParticipantsAdmins(),
				offset: 0,
				limit: 100,
			})
		)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ userId –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
		const isUserAdmin = participants.participants.some(participant => {
			console.log(participant.userId, 'participant')
			console.log(participant.userId, 'userId')
			console.log(participant.userId === userId, 'IsuserId')

			return participant.userId.value === userId.value
		})
		console.log(isUserAdmin, 'isUserAdmin')

		return isUserAdmin
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–æ–≤:', error)
		return false
	}
}
async function handleNewMessage(event) {
	try {
		const message = event.message
		const chatId = message.chatId
		const chat = await client.getEntity(chatId)
		const { id } = await client.getEntity(message.senderId)

		const chatTitle = chat.title
		const chatUsername = message.chat.username

		const admin = await isAdmin(chatId, id)
		console.log(admin, 'admin')

		console.log(chatUsername, 'chatUsername')

		// const user = await client.getEntity(message.senderId)
		// console.log(user, 'user-info')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ
		if (!channels.includes(chatTitle)) return

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–∞–Ω–∞–ª–∞
		if (!message.chatId || !message.isChannel) return
		const sender = await message.getSender()
		console.log('sernder', sender?.id)

		if (!sender || sender.bot) return

		const { fullUser } = await client.invoke(
			new Api.users.GetFullUser({ id: sender.id })
		)

		console.log(`üì© –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç @${sender.username || sender.id}`)

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		// Integer { value: 2260263425n } userFull.personalChannelId
		if (
			(fullUser && fullUser?.about?.split(':').includes('https')) ||
			fullUser?.personalChannelId
		) {
			console.log(
				`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${sender.username} —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –≤ bio! –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...`
			)

			// –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
			// await client.invoke(
			// 	new Api.messages.DeleteMessages({
			// 		chatId: chatId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞
			// 		id: [chatUsername], // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			// 	})
			// )
			// await client.invoke(
			// 	new Api.messages.DeleteMessages({
			// 		chatId: chatId,
			// 		id: [message.id],
			// 	})
			// )
			await client.deleteMessages(chatId, [message.id], { revoke: true })

			// await client.deleteMessages(message.chatId, [message.id])

			console.log(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω –≤ ${chatId}, –æ—Ç ${message.id}`)

			// (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			// await client.invoke(
			// 	new Api.channels.EditBanned({
			// 		channel: message.chatId,
			// 		participant: sender.id,
			// 		bannedRights: new Api.ChatBannedRights({
			// 			untilDate: 0, // –Ω–∞–≤—Å–µ–≥–¥–∞
			// 			sendMessages: true, // –∑–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
			// 		}),
			// 	})
			// )
			console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${sender.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`)
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞:', error)
	}
}
startBot()

// +27740906938
// +27740906938
// +27 74 090 6938
// +7 951 521 5669
// node bot-2.js
